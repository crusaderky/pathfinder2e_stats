[project]
name = "pathfinder2e_stats"
authors = [{name = "Guido Imperiale", email = "crusaderky@gmail.com"}]
license = {text = "Apache"}
description = "Statistical tools for Pathfinder 2nd edition"
keywords = ["pathfinder", "statistics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: Games/Entertainment :: Board Games",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.10"
dependencies = [
    "xarray>=2023.1.0",
    "numpy>=1.24",
    "pandas>=1.5",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/cusaderky/pathfinder2e_stats"
"Bug Tracker" = "https://github.com/cusaderky/pathfinder2e_stats/issues"
Changelog = "https://pathfinder2e-stats.readthedocs.io/en/latest/whats-new.html"

[project.readme]
text = "Statistical tools for Pathfinder 2nd Edition"
content-type = "text/plain"

[tool.setuptools]
packages = ["pathfinder2e_stats"]
zip-safe = false # https://mypy.readthedocs.io/en/latest/installed_packages.html
include-package-data = true

[tool.setuptools_scm]
# Use hardcoded version when .git has been removed and this is not a package created
# by sdist. This is the case e.g. of a remote deployment with PyCharm.
fallback_version = "9999"

[tool.setuptools.package-data]
pathfinder2e_stats = [
    "py.typed",
    "tables/*/*.csv",
]

[build-system]
requires = [
    "setuptools>=66",
    "setuptools_scm[toml]",
]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config -v -r sxfE --color=yes"
xfail_strict = true
python_files = ["test_*.py"]
testpaths = ["pathfinder2e_stats/tests"]
filterwarnings = [
    "error",
    "ignore:datetime.datetime.utcfromtimestamp:DeprecationWarning",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: nocover",
    "pragma: no cover",
    "TYPE_CHECKING",
    "except ImportError",
    "@overload",
    '@(abc\.)?abstractmethod',
]

[tool.codespell]
ignore-words-list = [
    "Mot",
]
exclude-file = ["pixi.lock"]

[tool.ruff]
exclude = [".eggs"]
target-version = "py310"

[tool.ruff.lint]
ignore = [
  "EM101",    # Exception must not use a string literal, assign to variable first
  "EM102",    # Exception must not use an f-string literal, assign to variable first
  "N802",     # Function name should be lowercase
  "N803",     # Argument name should be lowercase
  "N806",     # Variable should be lowercase
  "N816",     # Variable in global scope should not be mixedCase
  "PD901",    # Avoid using the generic variable name `df` for DataFrames
  "PT006",    # Wrong type passed to first argument of `pytest.mark.parametrize`; expected `tuple`
  "PLC0414",  # Import alias does not rename original package
  "PLR0912",  # Too many branches
  "PLR0913",  # Too many arguments in function definition
  "PLR2004",  # Magic value used in comparison, consider replacing `123` with a constant variable
  "PLW2901",  # for loop variable overwritten by assignment target
  "SIM108",   # Use ternary operator instead of if-else block
]
select = [
  "YTT",  # flake8-2020
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "EM",   # flake8-errmsg
  "EXE",  # flake8-executable
  "ICN",  # flake8-import-conventions
  "G",    # flake8-logging-format
  "PIE",  # flake8-pie
  "PT",   # flake8-pytest-style
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "ARG",  # flake8-unused-arguments
  "I",    # isort
  "NPY",  # NumPy specific rules
  "N",    # pep8-naming
  "E",    # Pycodestyle
  "W",    # Pycodestyle
  "PGH",  # pygrep-hooks
  "F",    # Pyflakes
  "PD",   # pandas-vet
  "PL",   # pylint
  "UP",   # pyupgrade
  "RUF",  # unused-noqa
  "TID",  # tidy-ups
  "EXE001",  #  Shebang is present but file is not executable
]

[tool.ruff.lint.isort]
known-first-party = ["pathfinder2e_stats"]

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["*.tests.*"]
disallow_untyped_defs = false

[tool.pixi.project]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["linux-64", "linux-aarch64", "osx-64", "osx-arm64", "win-64"]

[tool.pixi.dependencies]
python = ">=3.10"
xarray = ">=2023.1.0"
numpy = ">=1.24"
pandas = ">=1.5"

[tool.pixi.pypi-dependencies]
pathfinder2e-stats = { path = ".", editable = true }

[tool.pixi.feature.lint.dependencies]
pre-commit = "*"

[tool.pixi.feature.lint.tasks]
pre-commit-install = { cmd = "pre-commit install", description = "Install pre-commit"}
pre-commit = { cmd = "pre-commit run --all-files", description = "Run pre-commit"}
lint = { depends-on = ["pre-commit"] }

[tool.pixi.feature.tests.dependencies]
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.tests.tasks]
tests = { cmd = "pytest -v", description = "Run tests"}
tests-cov = { cmd="pytest -v -ra --cov --cov-report=xml --cov-report=term --durations=20", description = "Run tests with coverage"}
coverage = { cmd = "coverage html", depends-on = ["tests-cov"], description = "Generate test coverage html report"}
open-coverage = { cmd = "open htmlcov/index.html", depends-on = ["coverage"] , description = "Open test coverage report"}

[tool.pixi.feature.docs.dependencies]
sphinx = "*"
sphinx_rtd_theme = "*"
nbsphinx = "*"

[tool.pixi.feature.docs.tasks]
nbconvert = { cmd = "jupyter nbconvert --execute --to notebook ../notebooks/*.ipynb", cwd = "doc", description = "Convert notebooks to html"}
nbconvert-pp = { cmd = "mv notebooks/*.nbconvert.ipynb doc/notebooks/", description = "Move notebooks HTML files"}
sphinx-build = { cmd = "sphinx-build -n -j auto -b html -d ../build/doctrees . ../build/html", cwd = "doc", description = "Run Sphinx"}
docs = { depends-on = ["nbconvert", "nbconvert-pp", "sphinx-build"], description = "Build docs"}
open-docs = { cmd = "open build/html/index.html", depends-on = ["docs"] , description = "Open the generated docs"}

[tool.pixi.feature.jupyter.dependencies]
jupyterlab = "*"
matplotlib = "*"
hvplot = "*"
scipy = "*" # Add violin plots to hvplot

[tool.pixi.feature.jupyter.tasks]
jupyter = { cmd = "jupyter lab" , description = "Launch Jupyter Lab"}

[tool.pixi.feature.py310.dependencies]
python = "~=3.10.0"

[tool.pixi.feature.py313.dependencies]
python = "~=3.13.0"

[tool.pixi.feature.mindeps.dependencies]
python = "~=3.10.0"
xarray = "==2023.1.0"
numpy = "==1.24.0"
pandas = "==1.5.0"

[tool.pixi.environments]
default = { features = ["py313"], solve-group = "py313" }
lint = { features = ["py313", "lint"], solve-group = "py313" }
docs = { features = ["py313", "docs", "jupyter"], solve-group = "py313" }
tests = { features = ["py313", "tests"], solve-group = "py313" }
tests-mindeps = { features = ["tests", "mindeps"] }
tests-py310 = { features = ["py310", "tests"] }
tests-py313 = { features = ["py313", "tests"], solve-group = "py313" } # alias of tests
